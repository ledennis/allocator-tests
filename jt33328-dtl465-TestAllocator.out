==1361== Memcheck, a memory error detector
==1361== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==1361== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==1361== Command: ./TestAllocator
==1361== 
Running main() from gtest_main.cc
[==========] Running 32 tests from 11 test cases.
[----------] Global test environment set-up.
[----------] 3 tests from TestAllocatorE/0, where TypeParam = Allocator<int, 100ul>
[ RUN      ] TestAllocatorE/0.test_1
[       OK ] TestAllocatorE/0.test_1 (53 ms)
[ RUN      ] TestAllocatorE/0.test_2
[       OK ] TestAllocatorE/0.test_2 (5 ms)
[ RUN      ] TestAllocatorE/0.test_3
[       OK ] TestAllocatorE/0.test_3 (5 ms)
[----------] 3 tests from TestAllocatorE/0 (82 ms total)

[----------] 3 tests from TestAllocatorE/1, where TypeParam = Allocator<double, 100ul>
[ RUN      ] TestAllocatorE/1.test_1
[       OK ] TestAllocatorE/1.test_1 (3 ms)
[ RUN      ] TestAllocatorE/1.test_2
[       OK ] TestAllocatorE/1.test_2 (5 ms)
[ RUN      ] TestAllocatorE/1.test_3
[       OK ] TestAllocatorE/1.test_3 (3 ms)
[----------] 3 tests from TestAllocatorE/1 (14 ms total)

[----------] 3 tests from TestAllocator1/0, where TypeParam = std::allocator<int>
[ RUN      ] TestAllocator1/0.test_1
[       OK ] TestAllocator1/0.test_1 (5 ms)
[ RUN      ] TestAllocator1/0.test_2
[       OK ] TestAllocator1/0.test_2 (3 ms)
[ RUN      ] TestAllocator1/0.test_10
[       OK ] TestAllocator1/0.test_10 (5 ms)
[----------] 3 tests from TestAllocator1/0 (15 ms total)

[----------] 3 tests from TestAllocator1/1, where TypeParam = std::allocator<double>
[ RUN      ] TestAllocator1/1.test_1
[       OK ] TestAllocator1/1.test_1 (5 ms)
[ RUN      ] TestAllocator1/1.test_2
[       OK ] TestAllocator1/1.test_2 (3 ms)
[ RUN      ] TestAllocator1/1.test_10
[       OK ] TestAllocator1/1.test_10 (6 ms)
[----------] 3 tests from TestAllocator1/1 (18 ms total)

[----------] 3 tests from TestAllocator1/2, where TypeParam = Allocator<int, 100ul>
[ RUN      ] TestAllocator1/2.test_1
[       OK ] TestAllocator1/2.test_1 (10 ms)
[ RUN      ] TestAllocator1/2.test_2
[       OK ] TestAllocator1/2.test_2 (3 ms)
[ RUN      ] TestAllocator1/2.test_10
[       OK ] TestAllocator1/2.test_10 (5 ms)
[----------] 3 tests from TestAllocator1/2 (20 ms total)

[----------] 3 tests from TestAllocator1/3, where TypeParam = Allocator<double, 100ul>
[ RUN      ] TestAllocator1/3.test_1
[       OK ] TestAllocator1/3.test_1 (8 ms)
[ RUN      ] TestAllocator1/3.test_2
[       OK ] TestAllocator1/3.test_2 (3 ms)
[ RUN      ] TestAllocator1/3.test_10
[       OK ] TestAllocator1/3.test_10 (6 ms)
[----------] 3 tests from TestAllocator1/3 (20 ms total)

[----------] 2 tests from TestAllocator2
[ RUN      ] TestAllocator2.const_index
[       OK ] TestAllocator2.const_index (3 ms)
[ RUN      ] TestAllocator2.index
[       OK ] TestAllocator2.index (2 ms)
[----------] 2 tests from TestAllocator2 (6 ms total)

[----------] 2 tests from TestAllocator3/0, where TypeParam = Allocator<int, 100ul>
[ RUN      ] TestAllocator3/0.test_1
[       OK ] TestAllocator3/0.test_1 (4 ms)
[ RUN      ] TestAllocator3/0.test_10
[       OK ] TestAllocator3/0.test_10 (3 ms)
[----------] 2 tests from TestAllocator3/0 (9 ms total)

[----------] 2 tests from TestAllocator3/1, where TypeParam = Allocator<double, 100ul>
[ RUN      ] TestAllocator3/1.test_1
[       OK ] TestAllocator3/1.test_1 (5 ms)
[ RUN      ] TestAllocator3/1.test_10
[       OK ] TestAllocator3/1.test_10 (6 ms)
[----------] 2 tests from TestAllocator3/1 (14 ms total)

[----------] 4 tests from TestAllocator4/0, where TypeParam = Allocator<int, 100ul>
[ RUN      ] TestAllocator4/0.test_1
[       OK ] TestAllocator4/0.test_1 (7 ms)
[ RUN      ] TestAllocator4/0.test_2
[       OK ] TestAllocator4/0.test_2 (5 ms)
[ RUN      ] TestAllocator4/0.test_3
[       OK ] TestAllocator4/0.test_3 (3 ms)
[ RUN      ] TestAllocator4/0.test_4
[       OK ] TestAllocator4/0.test_4 (2 ms)
[----------] 4 tests from TestAllocator4/0 (22 ms total)

[----------] 4 tests from TestAllocator4/1, where TypeParam = Allocator<double, 100ul>
[ RUN      ] TestAllocator4/1.test_1
[       OK ] TestAllocator4/1.test_1 (8 ms)
[ RUN      ] TestAllocator4/1.test_2
[       OK ] TestAllocator4/1.test_2 (3 ms)
[ RUN      ] TestAllocator4/1.test_3
[       OK ] TestAllocator4/1.test_3 (3 ms)
[ RUN      ] TestAllocator4/1.test_4
[       OK ] TestAllocator4/1.test_4 (3 ms)
[----------] 4 tests from TestAllocator4/1 (22 ms total)

[----------] Global test environment tear-down
[==========] 32 tests from 11 test cases ran. (304 ms total)
[  PASSED  ] 32 tests.
==1361== 
==1361== HEAP SUMMARY:
==1361==     in use at exit: 72,704 bytes in 1 blocks
==1361==   total heap usage: 1,115 allocs, 1,114 frees, 230,484 bytes allocated
==1361== 
==1361== LEAK SUMMARY:
==1361==    definitely lost: 0 bytes in 0 blocks
==1361==    indirectly lost: 0 bytes in 0 blocks
==1361==      possibly lost: 0 bytes in 0 blocks
==1361==    still reachable: 72,704 bytes in 1 blocks
==1361==         suppressed: 0 bytes in 0 blocks
==1361== Rerun with --leak-check=full to see details of leaked memory
==1361== 
==1361== For counts of detected and suppressed errors, rerun with: -v
==1361== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'TestAllocator.c++'
Lines executed:84.25% of 146
Branches executed:55.19% of 964
Taken at least once:28.84% of 964
Calls executed:44.68% of 893
Creating 'TestAllocator.c++.gcov'
